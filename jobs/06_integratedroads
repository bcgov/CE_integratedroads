#!/bin/bash
set -euxo pipefail

# ----
# integrate the roads
# ----

PSQL="psql $DATABASE_URL -v ON_ERROR_STOP=1"

# load sources to db

# DRA
ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  -nln whse_basemapping.transport_line \
  -nlt PROMOTE_TO_MULTI \
  -lco GEOMETRY_NAME=geom \
  -overwrite \
  /vsis3/$OBJECTSTORE_BUCKET/whse_basemapping.transport_line.parquet \
  whse_basemapping.transport_line

# ften, just load cleaned version
ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  -nln whse_forest_tenure.ften_road_section_lines_svw \
  -lco GEOMETRY_NAME=geom \
  -overwrite \
  /vsis3/$OBJECTSTORE_BUCKET/ften_cleaned.parquet \
  ften_cleaned

# results - both polys and lines are required
ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  -nln results \
  -lco GEOMETRY_NAME=geom \
  -overwrite \
  /vsis3/$OBJECTSTORE_BUCKET/results.parquet \
  results

ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  -nln whse_forest_vegetation.rslt_forest_cover_inv_svw \
  -lco GEOMETRY_NAME=geom \
  -overwrite \
  /vsis3/$OBJECTSTORE_BUCKET/whse_forest_vegetation.rslt_forest_cover_inv_svw.parquet \
  whse_forest_vegetation.rslt_forest_cover_inv_svw

# ogc linear features
ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  -nln whse_mineral_tenure.og_petrlm_dev_rds_pre06_pub_sp \
  -lco GEOMETRY_NAME=geom \
  -overwrite \
  /vsis3/$OBJECTSTORE_BUCKET/whse_mineral_tenure.og_petrlm_dev_rds_pre06_pub_sp.parquet \
  whse_mineral_tenure.og_petrlm_dev_rds_pre06_pub_sp

ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  -nln whse_mineral_tenure.og_road_segment_permit_sp \
  -lco GEOMETRY_NAME=geom \
  -overwrite \
  /vsis3/$OBJECTSTORE_BUCKET/whse_mineral_tenure.og_road_segment_permit_sp.parquet \
  whse_mineral_tenure.og_road_segment_permit_sp

ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  -nln og_permits_row \
  -lco GEOMETRY_NAME=geom \
  -overwrite \
  /vsis3/$OBJECTSTORE_BUCKET/og_permits_row.parquet \
  og_permits_row

# ogc polygons
ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  -nln whse_mineral_tenure.og_road_area_permit_sp \
  -lco GEOMETRY_NAME=geom \
  -overwrite \
  /vsis3/$OBJECTSTORE_BUCKET/whse_mineral_tenure.og_road_area_permit_sp.parquet.parquet \
  whse_mineral_tenure.og_road_area_permit_sp

# dra code tables
$PSQL -c "DROP TABLE IF EXISTS whse_basemapping.transport_line_structure_code;
DROP TABLE IF EXISTS whse_basemapping.transport_line_surface_code;
DROP TABLE IF EXISTS whse_basemapping.transport_line_type_code;

CREATE TABLE whse_basemapping.transport_line_structure_code (
        transport_line_structure_code character varying(1) PRIMARY KEY,
        description character varying(20) NOT NULL,
        create_integration_session_id integer NOT NULL,
        create_integration_date timestamp with time zone,
        modify_integration_session_id integer NOT NULL,
        modify_integration_date timestamp with time zone
);

CREATE TABLE whse_basemapping.transport_line_surface_code (
        transport_line_surface_code character varying(1) PRIMARY KEY,
        description character varying(20) NOT NULL,
        create_integration_session_id integer NOT NULL,
        create_integration_date timestamp with time zone,
        modify_integration_session_id integer NOT NULL,
        modify_integration_date timestamp with time zone
);

CREATE TABLE whse_basemapping.transport_line_type_code (
        transport_line_type_code character varying(3) PRIMARY KEY,
        description character varying(30) NOT NULL,
        demographic_ind character varying(1) NOT NULL,
        create_integration_session_id integer NOT NULL,
        create_integration_date timestamp with time zone,
        modify_integration_session_id integer NOT NULL,
        modify_integration_date timestamp with time zone,
        road_class character varying(12) NOT NULL
);"
ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  -update \
  -append \
  -nln whse_basemapping.transport_line_type_code \
  /vsis3/$OBJECTSTORE_BUCKET/whse_basemapping.transport_line_type_code.csv \
  whse_basemapping.transport_line_type_code
ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  -update \
  -append \
  -nln whse_basemapping.transport_line_surface_code \
  /vsis3/$OBJECTSTORE_BUCKET/whse_basemapping.transport_line_surface_code.csv \
  whse_basemapping.transport_line_surface_code
ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  -update \
  -append \
  -nln whse_basemapping.transport_line_structure_code \
  /vsis3/$OBJECTSTORE_BUCKET/whse_basemapping.transport_line_structure_code.csv \
  whse_basemapping.transport_line_structure_code


# now create output table
$PSQL -f sql/integratedroads.sql

# and load dra to output
$PSQL -tXA \
  -c "INSERT INTO integratedroads (
        transport_line_id,
        map_tile,
        geom
      )
      SELECT
        transport_line_id,
        map_tile,
        geom
      FROM whse_basemapping.transport_line"

# load all other sources

# define all source tables and their primary keys in array
# bash arrays are like older python dicts, they are not ordered...
# https://stackoverflow.com/questions/29161323/how-to-keep-associative-array-order
declare -A tables;      declare -a ordered;
tables["ften_active"]="map_label"; ordered+=("ften_active")
tables["ften_retired"]="map_label"; ordered+=("ften_retired")
tables["results"]="results_id"; ordered+=("results")
tables["whse_forest_tenure.abr_road_section_line"]="road_section_line_id"; ordered+=("whse_forest_tenure.abr_road_section_line")
tables["whse_mineral_tenure.og_petrlm_dev_rds_pre06_pub_sp"]="og_petrlm_dev_rd_pre06_pub_id"; ordered+=("whse_mineral_tenure.og_petrlm_dev_rds_pre06_pub_sp")
tables["whse_mineral_tenure.og_road_segment_permit_sp"]="og_road_segment_permit_id"; ordered+=("whse_mineral_tenure.og_road_segment_permit_sp")
tables["og_permits_row"]="og_permits_row_id"; ordered+=("og_permits_row")

for source_table in "${ordered[@]}"
do
  echo "Processing: $source_table"
  # load from file
  # ogr2ogr

  psql $DATABASE_URL -tXA \
  -c "SELECT DISTINCT t.map_tile
      FROM whse_basemapping.bcgs_20k_grid t
      INNER JOIN $source_table r
      ON ST_Intersects(t.geom, r.geom)
      ORDER BY t.map_tile" \
      | parallel --progress --joblog .integratedroads.log \
        psql $DATABASE_URL -f sql/load_difference.sql -v ON_ERROR_STOP=1 -v tile={1} -v src_roads=$source_table -v pk=${tables[$source_table]}
done

# index the foreign keys for faster joins back to source tables
$PSQL -c "CREATE INDEX ON integratedroads (transport_line_id)"
$PSQL -c "CREATE INDEX ON integratedroads (map_label)"
$PSQL -c "CREATE INDEX ON integratedroads (road_section_line_id)"
$PSQL -c "CREATE INDEX ON integratedroads (og_petrlm_dev_rd_pre06_pub_id)"
$PSQL -c "CREATE INDEX ON integratedroads (og_road_segment_permit_id)"