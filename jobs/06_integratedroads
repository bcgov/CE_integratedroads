#!/bin/bash
set -euxo pipefail

# ----
# integrate the roads
# ----

PSQL="psql $DATABASE_URL -v ON_ERROR_STOP=1"

# load sources to db

# DRA
ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  -nln whse_basemapping.transport_line \
  -nlt PROMOTE_TO_MULTI \
  -lco GEOMETRY_NAME=geom \
  -overwrite \
  /vsis3/$OBJECTSTORE_BUCKET/whse_basemapping.transport_line.parquet \
  whse_basemapping.transport_line

# ften
ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  -nln whse_forest_tenure.ften_road_section_lines_svw \
  -lco GEOMETRY_NAME=geom \
  -overwrite \
  /vsis3/$OBJECTSTORE_BUCKET/whse_forest_tenure.ften_road_section_lines_svw.parquet \
  whse_forest_tenure.ften_road_section_lines_svw

# create views of retired/active ften roads
$PSQL -c "create view ften_active as (
  select
    life_cycle_status_code,
    map_label,
    map_tile,
    geom
  from whse_forest_tenure.ften_road_section_lines_svw
  where life_cycle_status_code = 'ACTIVE'
)"

$PSQL -c "create view ften_retired as (
  select
    life_cycle_status_code,
    map_label,
    map_tile,
    geom
  from whse_forest_tenure.ften_road_section_lines_svw
  where life_cycle_status_code = 'RETIRED'
)"

# results - both polys and lines are required
ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  -nln results \
  -lco GEOMETRY_NAME=geom \
  -overwrite \
  /vsis3/$OBJECTSTORE_BUCKET/results.parquet \
  results

ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  -nln whse_forest_vegetation.rslt_forest_cover_inv_svw \
  -lco GEOMETRY_NAME=geom \
  -nlt PROMOTE_TO_MULTI \
  -overwrite \
  /vsis3/$OBJECTSTORE_BUCKET/whse_forest_vegetation.rslt_forest_cover_inv_svw.parquet \
  whse_forest_vegetation.rslt_forest_cover_inv_svw

# ogc linear features
ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  -nln whse_mineral_tenure.og_petrlm_dev_rds_pre06_pub_sp \
  -lco GEOMETRY_NAME=geom \
  -overwrite \
  /vsis3/$OBJECTSTORE_BUCKET/whse_mineral_tenure.og_petrlm_dev_rds_pre06_pub_sp.parquet \
  whse_mineral_tenure.og_petrlm_dev_rds_pre06_pub_sp

ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  -nln whse_mineral_tenure.og_road_segment_permit_sp \
  -lco GEOMETRY_NAME=geom \
  -overwrite \
  /vsis3/$OBJECTSTORE_BUCKET/whse_mineral_tenure.og_road_segment_permit_sp.parquet \
  whse_mineral_tenure.og_road_segment_permit_sp

ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  -nln og_permits_row \
  -lco GEOMETRY_NAME=geom \
  -overwrite \
  /vsis3/$OBJECTSTORE_BUCKET/og_permits_row.parquet \
  og_permits_row

# ogc polygons
ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  -nln whse_mineral_tenure.og_road_area_permit_sp \
  -lco GEOMETRY_NAME=geom \
  -overwrite \
  /vsis3/$OBJECTSTORE_BUCKET/whse_mineral_tenure.og_road_area_permit_sp.parquet \
  whse_mineral_tenure.og_road_area_permit_sp

# cariboo roads
ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  -nln cariboo_consolidated_roads \
  -lco GEOMETRY_NAME=geom \
  -nlt PROMOTE_TO_MULTI \
  -overwrite \
  /vsis3/$OBJECTSTORE_BUCKET/cariboo_consolidated_roads.parquet \
  cariboo_consolidated_roads

# dra code tables
$PSQL -c "DROP TABLE IF EXISTS whse_basemapping.transport_line_structure_code;
DROP TABLE IF EXISTS whse_basemapping.transport_line_surface_code;
DROP TABLE IF EXISTS whse_basemapping.transport_line_type_code;

CREATE TABLE whse_basemapping.transport_line_structure_code (
        transport_line_structure_code character varying(1) PRIMARY KEY,
        description character varying(20) NOT NULL,
        create_integration_session_id integer NOT NULL,
        create_integration_date timestamp with time zone,
        modify_integration_session_id integer NOT NULL,
        modify_integration_date timestamp with time zone
);

CREATE TABLE whse_basemapping.transport_line_surface_code (
        transport_line_surface_code character varying(1) PRIMARY KEY,
        description character varying(20) NOT NULL,
        create_integration_session_id integer NOT NULL,
        create_integration_date timestamp with time zone,
        modify_integration_session_id integer NOT NULL,
        modify_integration_date timestamp with time zone
);

CREATE TABLE whse_basemapping.transport_line_type_code (
        transport_line_type_code character varying(3) PRIMARY KEY,
        description character varying(30) NOT NULL,
        demographic_ind character varying(1) NOT NULL,
        create_integration_session_id integer NOT NULL,
        create_integration_date timestamp with time zone,
        modify_integration_session_id integer NOT NULL,
        modify_integration_date timestamp with time zone,
        road_class character varying(12) NOT NULL
);"
ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  -update \
  -append \
  -nln whse_basemapping.transport_line_type_code \
  /vsis3/$OBJECTSTORE_BUCKET/whse_basemapping.transport_line_type_code.csv \
  whse_basemapping.transport_line_type_code
ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  -update \
  -append \
  -nln whse_basemapping.transport_line_surface_code \
  /vsis3/$OBJECTSTORE_BUCKET/whse_basemapping.transport_line_surface_code.csv \
  whse_basemapping.transport_line_surface_code
ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  -update \
  -append \
  -nln whse_basemapping.transport_line_structure_code \
  /vsis3/$OBJECTSTORE_BUCKET/whse_basemapping.transport_line_structure_code.csv \
  whse_basemapping.transport_line_structure_code


# now create output table
$PSQL -f sql/integratedroads.sql

# and load dra to output
$PSQL -tXA \
  -c "INSERT INTO integratedroads (
        transport_line_id,
        map_tile,
        geom
      )
      SELECT
        transport_line_id,
        map_tile,
        (st_dump(geom)).geom
      FROM whse_basemapping.transport_line"

# load all other sources in descending order of priority
psql $DATABASE_URL -tXA \
-c "SELECT DISTINCT map_tile
    FROM ften_active
    ORDER BY map_tile" \
    | parallel --tag \
      $PSQL -f sql/load_difference.sql -v tile={1} -v src_roads=ften_active -v pk=map_label

psql $DATABASE_URL -tXA \
-c "SELECT DISTINCT map_tile
    FROM ften_retired
    ORDER BY map_tile" \
    | parallel --tag \
      $PSQL -f sql/load_difference.sql -v tile={1} -v src_roads=ften_retired -v pk=map_label

psql $DATABASE_URL -tXA \
-c "SELECT DISTINCT map_tile
    FROM results
    ORDER BY map_tile" \
    | parallel --tag \
      $PSQL -f sql/load_difference.sql -v tile={1} -v src_roads=results -v pk=results_id

psql $DATABASE_URL -tXA \
-c "SELECT DISTINCT map_tile
    FROM whse_mineral_tenure.og_petrlm_dev_rds_pre06_pub_sp
    ORDER BY map_tile" \
    | parallel --tag \
      $PSQL -f sql/load_difference.sql -v tile={1} -v src_roads=whse_mineral_tenure.og_petrlm_dev_rds_pre06_pub_sp -v pk=og_petrlm_dev_rd_pre06_pub_id

psql $DATABASE_URL -tXA \
-c "SELECT DISTINCT map_tile
    FROM whse_mineral_tenure.og_road_segment_permit_sp
    ORDER BY map_tile" \
    | parallel --tag \
      $PSQL -f sql/load_difference.sql -v tile={1} -v src_roads=whse_mineral_tenure.og_road_segment_permit_sp -v pk=og_road_segment_permit_id

psql $DATABASE_URL -tXA \
-c "SELECT DISTINCT map_tile
    FROM og_permits_row
    ORDER BY map_tile" \
    | parallel --tag \
      $PSQL -f sql/load_difference.sql -v tile={1} -v src_roads=og_permits_row -v pk=og_permits_row_id

# index the foreign keys for faster joins back to source tables
$PSQL -c "CREATE INDEX ON integratedroads (transport_line_id)"
$PSQL -c "CREATE INDEX ON integratedroads (map_label)"
$PSQL -c "CREATE INDEX ON integratedroads (og_petrlm_dev_rd_pre06_pub_id)"
$PSQL -c "CREATE INDEX ON integratedroads (og_road_segment_permit_id)"


# for all output features, identify what other source roads intersect with the road's 7m buffer
$PSQL -tXA -c "SELECT DISTINCT map_tile FROM integratedroads ORDER BY map_tile" \
  | parallel --tag $PSQL -f sql/load_sources.sql -v tile={1}
$PSQL -c "CREATE INDEX ON integratedroads_sources (integratedroads_id)"
$PSQL -c "CREATE INDEX ON integratedroads_sources (map_label)"
$PSQL -c "CREATE INDEX ON integratedroads_sources (forest_cover_id)"
$PSQL -c "CREATE INDEX ON integratedroads_sources (og_petrlm_dev_rd_pre06_pub_id)"
$PSQL -c "CREATE INDEX ON integratedroads_sources (og_road_segment_permit_id)"
$PSQL -c "CREATE INDEX ON integratedroads_sources (og_road_area_permit_id)"


$PSQL -c "REFRESH MATERIALIZED VIEW integratedroads_vw"

# dump to file
ogr2ogr \
  -f Parquet \
  -nlt LINESTRING \
  -nln integratedroads \
  -sql "SELECT * FROM integratedroads_vw" \
  /vsis3/$OBJECTSTORE_BUCKET/integratedroads.parquet \
  "PG:$DATABASE_URL"

# summarize road source by length and percentage in the output gpkg
$PSQL --csv -c "WITH total AS \
( \
  SELECT SUM(ST_Length(geom)) AS total_length \
  FROM integratedroads_vw \
) \
SELECT \
  bcgw_source, \
  to_char(bcgw_extraction_date, 'YYYY-MM-DD') as bcgw_extraction_date, \
  ROUND((SUM(ST_Length(geom) / 1000)::numeric))  AS length_km, \
  ROUND( \
    (((SUM(ST_Length(geom)) / t.total_length)) * 100)::numeric, 1) as pct \
FROM integratedroads_vw, total t \
GROUP BY bcgw_source, to_char(bcgw_extraction_date, 'YYYY-MM-DD'), total_length \
ORDER BY bcgw_source" > bcgw_source_summary.csv

aws s3 cp bcgw_source_summary.csv s3://$OBJECTSTORE_BUCKET